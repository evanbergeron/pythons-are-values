# Yay
"hw1.py - Evan Bergeron + ebergero + Section N" and (() or (__import__('sys')._getframe((-1)).f_locals.update({'sys': __import__('sys')}) or sys._getframe((-1)).f_locals.update({'printf': (lambda *s: sys.stdout.write(('%s\n' % ' '.join(map(str, s))))), 'vvvs': sys._getframe((-1)).f_locals, 'let': (lambda x, v: vvvs.update({x: v})), 'throw': (lambda e, msg: (_ for _ in ()).throw(e(msg)))})) or let('kthDigit', (lambda x, k: (() or ((abs(x) / (10 ** k)) % 10)))) or let('numberOfPoolBalls', (lambda rows: (() or ((rows * (rows + 1)) / 2)))) or let('numberOfPoolBallRows', (lambda balls: (() or round(((0.5 * ((-1) + (((8 * abs(balls)) + 1) ** 0.5))) + 0.49))))) or let('isEvenPositiveInt', (lambda x: (() or ((type(x) == int) and ((x % 2) == 0) and (x > 0))))) or let('isPerfectCube', (lambda x: (() or ([epsilon for epsilon in [1e-05]] and ()) or (abs((round((abs(x) ** (1.0 / 3))) - (abs(x) ** (1.0 / 3)))) < epsilon)))) or let('isTriangular', (lambda x: (() or (x == numberOfPoolBalls(numberOfPoolBallRows(x)))))) or let('fabricYards', (lambda inches: (() or ((inches + 35) / 36)))) or let('fabricExcess', (lambda inches: (() or ((36 * fabricYards(inches)) - inches)))) or let('nearestBusStop', (lambda street: (() or (8 * ((street + 3) / 8))))) or let('areCollinear', (lambda x1, y1, x2, y2, x3, y3: (() or ([epsilon for epsilon in [0.0001]] and ()) or ([sideLength1 for sideLength1 in [((((x1 - x2) ** 2) + ((y1 - y2) ** 2)) ** 0.5)]] and ()) or ([sideLength2 for sideLength2 in [((((x1 - x3) ** 2) + ((y1 - y3) ** 2)) ** 0.5)]] and ()) or ([sideLength3 for sideLength3 in [((((x3 - x2) ** 2) + ((y3 - y2) ** 2)) ** 0.5)]] and ()) or ([trianglePerimeter for trianglePerimeter in [((sideLength1 + sideLength2) + sideLength3)]] and ()) or ([biggestSide for biggestSide in [max(sideLength1, sideLength2, sideLength3)]] and ()) or (((trianglePerimeter - biggestSide) - biggestSide) < epsilon)))) or let('testKthDigit', (lambda : (() or printf('Testing kthDigit()...') or (((kthDigit(789, 0) == 9) or throw(AssertionError, '')) and ()) or (((kthDigit(789, 1) == 8) or throw(AssertionError, '')) and ()) or (((kthDigit(789, 2) == 7) or throw(AssertionError, '')) and ()) or (((kthDigit(789, 3) == 0) or throw(AssertionError, '')) and ()) or (((kthDigit((-789), 0) == 9) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testNumberOfPoolBalls', (lambda : (() or printf('Testing numberOfPoolBalls()...') or (((numberOfPoolBalls(0) == 0) or throw(AssertionError, '')) and ()) or (((numberOfPoolBalls(1) == 1) or throw(AssertionError, '')) and ()) or (((numberOfPoolBalls(2) == (1 + 2)) or throw(AssertionError, '')) and ()) or (((numberOfPoolBalls(3) == ((1 + 2) + 3)) or throw(AssertionError, '')) and ()) or (((numberOfPoolBalls(10) == 55) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testNumberOfPoolBallRows', (lambda : (() or printf('Testing numberOfPoolBallRows()...') or (((numberOfPoolBallRows(0) == 0) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(1) == 1) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(2) == 2) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(3) == 2) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(4) == 3) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(6) == 3) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(7) == 4) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(10) == 4) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(11) == 5) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(54) == 10) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(55) == 10) or throw(AssertionError, '')) and ()) or (((numberOfPoolBallRows(56) == 11) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testIsEvenPositiveInt', (lambda : (() or printf('Testing isEvenPositiveInt()...') or (((isEvenPositiveInt(2) == True) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(2040608) == True) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(21) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(20406081) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(0) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt((-2)) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt((-2040608)) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt('Go Steelers!') == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(1.23456) == False) or throw(AssertionError, '')) and ()) or (((isEvenPositiveInt(True) == False) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testIsPerfectCube', (lambda : (() or printf('Testing isPerfectCube()...') or (((isPerfectCube(0) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube(1) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube((-1)) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube(8) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube((-8)) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube(27) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube((-27)) == True) or throw(AssertionError, '')) and ()) or (((isPerfectCube(16) == False) or throw(AssertionError, '')) and ()) or (((isPerfectCube((-15)) == False) or throw(AssertionError, '')) and ()) or (((isPerfectCube((-16)) == False) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testIsTriangular', (lambda : (() or printf('Testing isTriangular()...') or (((isTriangular(0) == True) or throw(AssertionError, '')) and ()) or (((isTriangular(1) == True) or throw(AssertionError, '')) and ()) or (((isTriangular(2) == False) or throw(AssertionError, '')) and ()) or (((isTriangular(3) == True) or throw(AssertionError, '')) and ()) or (((isTriangular(4) == False) or throw(AssertionError, '')) and ()) or (((isTriangular(5) == False) or throw(AssertionError, '')) and ()) or (((isTriangular(6) == True) or throw(AssertionError, '')) and ()) or (((isTriangular(54) == False) or throw(AssertionError, '')) and ()) or (((isTriangular(55) == True) or throw(AssertionError, '')) and ()) or (((isTriangular(56) == False) or throw(AssertionError, '')) and ()) or (((isTriangular((-1)) == False) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testFabricYards', (lambda : (() or printf('Testing fabricYards... ') or (((fabricYards(0) == 0) or throw(AssertionError, '')) and ()) or (((fabricYards(1) == 1) or throw(AssertionError, '')) and ()) or (((fabricYards(35) == 1) or throw(AssertionError, '')) and ()) or (((fabricYards(36) == 1) or throw(AssertionError, '')) and ()) or (((fabricYards(37) == 2) or throw(AssertionError, '')) and ()) or (((fabricYards(72) == 2) or throw(AssertionError, '')) and ()) or (((fabricYards(73) == 3) or throw(AssertionError, '')) and ()) or (((fabricYards(108) == 3) or throw(AssertionError, '')) and ()) or (((fabricYards(109) == 4) or throw(AssertionError, '')) and ()) or printf('Passed all tests!')))) or let('testFabricExcess', (lambda : (() or printf('Testing fabricExcess... ') or (((fabricExcess(0) == 0) or throw(AssertionError, '')) and ()) or (((fabricExcess(1) == 35) or throw(AssertionError, '')) and ()) or (((fabricExcess(35) == 1) or throw(AssertionError, '')) and ()) or (((fabricExcess(36) == 0) or throw(AssertionError, '')) and ()) or (((fabricExcess(37) == 35) or throw(AssertionError, '')) and ()) or (((fabricExcess(72) == 0) or throw(AssertionError, '')) and ()) or (((fabricExcess(73) == 35) or throw(AssertionError, '')) and ()) or (((fabricExcess(108) == 0) or throw(AssertionError, '')) and ()) or (((fabricExcess(109) == 35) or throw(AssertionError, '')) and ()) or printf('Passed all tests!')))) or let('testNearestBusStop', (lambda : (() or printf('Testing nearestBusStop()...') or (((nearestBusStop(0) == 0) or throw(AssertionError, '')) and ()) or (((nearestBusStop(4) == 0) or throw(AssertionError, '')) and ()) or (((nearestBusStop(5) == 8) or throw(AssertionError, '')) and ()) or (((nearestBusStop(12) == 8) or throw(AssertionError, '')) and ()) or (((nearestBusStop(13) == 16) or throw(AssertionError, '')) and ()) or (((nearestBusStop(20) == 16) or throw(AssertionError, '')) and ()) or (((nearestBusStop(21) == 24) or throw(AssertionError, '')) and ()) or printf('Passed all tests!')))) or let('testAreCollinear', (lambda : (() or printf('Testing areCollinear()...') or (((areCollinear(0, 0, 1, 1, 2, 2) == True) or throw(AssertionError, '')) and ()) or (((areCollinear(0, 0, 1, 1, 2, 3) == False) or throw(AssertionError, '')) and ()) or (((areCollinear(1, 1, 0, 0, 2, 2) == True) or throw(AssertionError, '')) and ()) or (((areCollinear(1, 1, 0, (-1), 2, 2) == False) or throw(AssertionError, '')) and ()) or (((areCollinear(2, 0, 2, 1, 2, 2) == True) or throw(AssertionError, '')) and ()) or (((areCollinear(2, 0, 2, 1, 3, 2) == False) or throw(AssertionError, '')) and ()) or (((areCollinear(3, 0, 2, 1, 3, 2) == False) or throw(AssertionError, '')) and ()) or printf('Passed all tests!')))) or let('testAll', (lambda : (() or testKthDigit() or testNumberOfPoolBalls() or testNumberOfPoolBallRows() or testIsEvenPositiveInt() or testIsPerfectCube() or testIsTriangular() or testFabricYards() or testFabricExcess() or testNearestBusStop() or testAreCollinear()))) or testAll())
