(() or (__import__('sys')._getframe((-1)).f_locals.update({'sys': __import__('sys')}) or sys._getframe((-1)).f_locals.update({'MODULE_LEVEL_VARS': sys._getframe((-1)).f_locals}) or sys._getframe((-1)).f_locals.update({'let': (lambda x, v: MODULE_LEVEL_VARS.update({x: v}))}) or let('throw', (lambda e: (_ for _ in ()).throw(e))) or let('printf', (lambda *s: sys.stdout.write(('%s\n' % ' '.join(map(str, s))))))) or let('makeBoard', (lambda moves: (() or ([board for board in [0]] and ()) or [(lambda : (() or ([board for board in [(board + (8 * (10 ** i)))]] and ())))() for i in xrange(0, moves)] or board))) or let('testMakeBoard', (lambda : (() or printf('Testing makeBoard()...') or (((makeBoard(1) == 8) or throw(AssertionError, '')) and ()) or (((makeBoard(2) == 88) or throw(AssertionError, '')) and ()) or (((makeBoard(3) == 888) or throw(AssertionError, '')) and ()) or printf('Passed!')))) or let('testAll', (lambda : (() or testMakeBoard()))) or testAll())
